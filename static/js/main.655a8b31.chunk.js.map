{"version":3,"sources":["TaskList.js","App.js","registerServiceWorker.js","index.js"],"names":["TaskList","_ref","task","tasks","map","react_default","a","createElement","className","key","number","name","mdbreact_esm","App","state","error","handleAdd","newTask","_this","length","newTasks","concat","Object","toConsumableArray","setState","handleRemove","tasksCopy","pop","handleClear","this","color","onClick","target","src_TaskList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.655a8b31.chunk.js","sourcesContent":["import React from \"react\";\nimport { MDBCol, MDBContainer } from \"mdbreact\";\nimport \"./TaskList.css\";\n\nfunction TaskList({ tasks }) {\n  const task = tasks.map(task => (\n    <li className=\"lead\" key={task.number}>\n      {task.name} {task.number}\n    </li>\n  ));\n  return (\n    <MDBContainer>\n      <MDBCol className=\"text-center\">\n        <ul>{task}</ul>\n      </MDBCol>\n    </MDBContainer>\n  );\n}\nexport default TaskList;\n","import React, { Component } from \"react\";\nimport { MDBBtn, MDBCol, MDBContainer, MDBAlert } from \"mdbreact\";\nimport \"./index.css\";\nimport TaskList from \"./TaskList\";\n\nclass App extends Component {\n  state = {\n    tasks: [],\n    error: false\n  };\n  handleAdd = () => {\n    const newTask = {\n      name: \"Task number\",\n      number: this.state.tasks.length + 1\n    };\n    const newTasks = [...this.state.tasks, newTask];\n    this.setState({\n      tasks: newTasks,\n      error: false\n    });\n  };\n  handleRemove = () => {\n    if (this.state.tasks.length > 0) {\n      let tasksCopy = this.state.tasks;\n      tasksCopy.pop();\n      this.setState({\n        tasks: tasksCopy,\n        error: false\n      });\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n  handleClear = () => {\n    if (this.state.tasks.length > 0) {\n      this.setState({\n        tasks: [],\n        error: false\n      });\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n  render() {\n    return (\n      <MDBContainer>\n        <MDBCol className=\"text-center\">\n          {this.state.error ? (\n            <MDBAlert color=\"warning\">List is empty. Add task.</MDBAlert>\n          ) : null}\n          <MDBBtn onClick={this.handleAdd} target=\"blank\" color=\"primary\">\n            <strong>ADD</strong>\n          </MDBBtn>\n          <MDBBtn onClick={this.handleRemove} target=\"blank\" color=\"warning\">\n            <strong>Remove</strong>\n          </MDBBtn>\n          <MDBBtn onClick={this.handleClear} target=\"blank\" color=\"danger\">\n            <strong>Clear</strong>\n          </MDBBtn>\n        </MDBCol>\n        <TaskList {...this.state} />\n      </MDBContainer>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}